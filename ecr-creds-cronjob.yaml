---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecr-registry-helper-sa
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ecr-registry-helper-cluster-role
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get","delete","create"]
  - apiGroups: [ "" ]
    resources: [ "namespaces" ]
    verbs: [ "get", "list", "watch" ]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ecr-registry-helper
subjects:
  - kind: ServiceAccount
    name: ecr-registry-helper-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: ecr-registry-helper-cluster-role
  apiGroup: rbac.authorization.k8s.io
---


apiVersion: batch/v1
kind: CronJob
metadata:
  name: ecr-registry-helper
  namespace: kube-system
spec:
  schedule: "*/8 * * * *"
  successfulJobsHistoryLimit: 3
  suspend: false
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: ecr-registry-helper-sa
          restartPolicy: Never
          containers:
            - name: ecr-creds
              image: amazon/aws-cli:2.10.3
              imagePullPolicy: IfNotPresent
              command:
                - "/bin/sh"
                - "-c"
                - |
                  echo setting up kubectl
                  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                  chmod +x ./kubectl
                  
                  echo getting AWS_ACCESS_KEY_ID
                  export AWS_ACCESS_KEY_ID=$(./kubectl get secret -n default aws-conf -o jsonpath='{.data.aws_access_key_id}' | base64 -d)
                  echo getting AWS_SECRET_ACCESS_KEY
                  export AWS_SECRET_ACCESS_KEY=$(./kubectl get secret -n default aws-conf  -o jsonpath='{.data.aws_secret_access_key}' | base64 -d)
                  
                  echo "exporting AWS_DEFAULT_REGION"
                  export AWS_DEFAULT_REGION=$(./kubectl get secret -n default aws-conf  -o jsonpath='{.data.region}' | base64 -d)
                  echo "exporting AWS_DEFAULT_OUTPUT"
                  export AWS_DEFAULT_OUTPUT=$(./kubectl get secret -n default aws-conf  -o jsonpath='{.data.output}' | base64 -d)
                  
                  echo initializing variables
                  AWS_REGION="${AWS_DEFAULT_REGION}"
                  AWS_ACCOUNT=$(./kubectl get secret -n default aws-conf  -o jsonpath='{.data.account_id}' | base64 -d)
                  echo getting ecr token
                  ECR_TOKEN=$(aws ecr get-login-password --region $AWS_REGION)
                  
                  
                  for NS in $(./kubectl get ns --no-headers -o custom-columns=":metadata.name")
                  do
                  
                    echo "deleting secret in namespace: ${NS}"
                    ./kubectl delete secret --ignore-not-found ecr-docker-creds -n $NS
                  
                    echo creating secret in namespace: $NS
                    ./kubectl create secret docker-registry ecr-docker-creds \
                    --docker-server=https://${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com \
                    --docker-username=AWS \
                    --docker-password=${ECR_TOKEN} --namespace=$NS
             
                  done
                  
                  echo "done"


